// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// Relationships


// 1 to 1 Relationships User => Profile Relation
// 1 to Many => Category => Product Relation
// many to many

// title, couponCode, ExpiryDate
model Coupon {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  couponCode String
  expiryDate DateTime
  isActive Boolean
	createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  link String
  imageUrl String
  slug String
  isActive Boolean
	createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String   @unique
  imageUrl   String?
  description String?   
  isActive   Boolean

  products   CategoryProduct[]
  markets    CategoryMarket[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
}

model Market {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String   @unique
  logoUrl    String?
  description String?  
  isActive   Boolean

  categories CategoryMarket[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  imageUrl    String?
  description String?  
  isActive    Boolean
  sku         String?
  barcode     String?
  productPrice Float
  salePrice   Float
  tags        String[]

  categories  CategoryProduct[]

  userProducts UserProduct[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}

model CategoryProduct {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String @db.ObjectId
  productId   String @db.ObjectId

  category    Category @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product     Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CategoryMarket {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String @db.ObjectId
  marketId    String @db.ObjectId

  category    Category @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  market      Market @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserRole {
  ADMIN
  USER
  CLIENT
  MODERATOR
}


// USER => ADMIN, CLIENT, CUSTOMER, AGENT
model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
   userProducts UserProduct[] // Explicit relation to join table 
  role          UserRole @default(USER)  // âœ… Ensure it's set to UserRole ENUM
  client        Client?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 

model Client {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  code            String    @unique
  name            String
  phone           String
  email           String
  physicalAddress String
  contactPerson   String?
  contactPersonPhone String?
  profileImageUrl  String?
  terms           String?
  notes           String?
  isActive        Boolean  @default(true)
  companyTask     String
  products        String[]

  
  user   User?  @relation(fields: [userId], references: [id])
  userId String? @unique

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}



model Community {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String? 
  content String?  
  isActive Boolean

}

model UserProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}




